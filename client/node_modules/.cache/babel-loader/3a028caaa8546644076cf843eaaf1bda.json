{"ast":null,"code":"const auth = localStorage.getItem('jwt');\nexport const applyLoan = ({\n  amount,\n  tenor\n}) => fetch(`api/v1/loans/${auth.userId}/apply`, {\n  method: 'POST',\n  body: JSON.stringify({\n    amount,\n    tenor\n  }),\n  headers: {\n    'Authorization': `Bearer ${auth.token}`,\n    'Content-Type': 'application/json'\n  }\n}).then(response => response.json());\nexport const repayLoan = ({\n  repaymentAmount\n}) => {\n  return fetch(`api/v1/loans/$auth{loan}/repayment`, {\n    method: 'POST',\n    body: JSON.stringify({\n      repaymentAmount\n    }),\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.json());\n};\nexport const loadLoans = async () => await fetch('api/v1/loans', {\n  method: 'GET',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n}).then(response => response.json());\nexport const loadLoan = async () => await fetch(`api/v1/loans/${userId}`, {\n  method: \"GET\",\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}).then(response => response.json());\nexport const loadRepaymentHistory = async ({\n  loanId\n}) => await fetch(`api/v1/loans/${loanId}/repaymentHistory`, {\n  method: \"GET\",\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}).then(response => response.json());\nexport const approveOrRejectLoan = ({\n  loanId,\n  status\n}) => fetch(`api/v1/loans/${loanId}`, {\n  method: 'POST',\n  body: JSON.stringify({\n    status\n  }),\n  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n}).then(response => response.json());","map":{"version":3,"sources":["/home/vanellope/Programming/Javascript/Quickloan/frontend/src/api/loanApi.js"],"names":["auth","localStorage","getItem","applyLoan","amount","tenor","fetch","userId","method","body","JSON","stringify","headers","token","then","response","json","repayLoan","repaymentAmount","loadLoans","loadLoan","Authorization","loadRepaymentHistory","loanId","approveOrRejectLoan","status"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAb;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KACrBC,KAAK,CAAE,gBAAeN,IAAI,CAACO,MAAO,QAA7B,EAAsC;AACvCC,EAAAA,MAAM,EAAE,MAD+B;AAEvCC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAf,CAFiC;AAGvCO,EAAAA,OAAO,EAAE;AACL,qBAAkB,UAASZ,IAAI,CAACa,KAAM,EADjC;AAEL,oBAAgB;AAFX;AAH8B,CAAtC,CAAL,CAQKC,IARL,CAQUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARtB,CADG;AAYP,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyB;AAC9C,SAAOZ,KAAK,CAAE,oCAAF,EAAuC;AAC/CE,IAAAA,MAAM,EAAE,MADuC;AAE/CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEO,MAAAA;AAAF,KAAf,CAFyC;AAG/CN,IAAAA,OAAO,EAAE;AACL,uBAAkB,UAASC,KAAM,EAD5B;AAEL,sBAAgB;AAFX;AAHsC,GAAvC,CAAL,CAQFC,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,CAAP;AASH,CAVM;AAYP,OAAO,MAAMG,SAAS,GAAG,YACrB,MAAMb,KAAK,CAAC,cAAD,EAAiB;AACxBE,EAAAA,MAAM,EAAE,KADgB;AAExBI,EAAAA,OAAO,EAAE;AACL,qBAAkB,UAASC,KAAM;AAD5B;AAFe,CAAjB,CAAL,CAMDC,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CADH;AAUP,OAAO,MAAMI,QAAQ,GAAG,YACtB,MAAMd,KAAK,CAAE,gBAAeC,MAAO,EAAxB,EAA2B;AACpCC,EAAAA,MAAM,EAAE,KAD4B;AAEpCI,EAAAA,OAAO,EAAE;AACPS,IAAAA,aAAa,EAAG,UAASR,KAAM;AADxB;AAF2B,CAA3B,CAAL,CAKHC,IALG,CAKGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALhB,CADD;AAQP,OAAO,MAAMM,oBAAoB,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAClC,MAAMjB,KAAK,CAAE,gBAAeiB,MAAO,mBAAxB,EAA4C;AACrDf,EAAAA,MAAM,EAAE,KAD6C;AAErDI,EAAAA,OAAO,EAAE;AACPS,IAAAA,aAAa,EAAG,UAASR,KAAM;AADxB;AAF4C,CAA5C,CAAL,CAKHC,IALG,CAKGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALhB,CADD;AAQP,OAAO,MAAMQ,mBAAmB,GAAG,CAAC;AAAED,EAAAA,MAAF;AAAUE,EAAAA;AAAV,CAAD,KAC/BnB,KAAK,CAAE,gBAAeiB,MAAO,EAAxB,EAA2B;AAC5Bf,EAAAA,MAAM,EAAE,MADoB;AAE5BC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEc,IAAAA;AAAF,GAAf,CAFsB;AAG5Bb,EAAAA,OAAO,EAAE;AACL,qBAAkB,UAASC,KAAM,EAD5B;AAEL,oBAAgB;AAFX;AAHmB,CAA3B,CAAL,CAQKC,IARL,CAQUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARtB,CADG","sourcesContent":["const auth = localStorage.getItem('jwt');\n\nexport const applyLoan = ({ amount, tenor}) => (\n    fetch(`api/v1/loans/${auth.userId}/apply`, {\n        method: 'POST',\n        body: JSON.stringify({ amount, tenor }),\n        headers: {\n            'Authorization': `Bearer ${auth.token}`,\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n);\n\nexport const repayLoan = ({ repaymentAmount }) => {\n    return fetch(`api/v1/loans/$auth{loan}/repayment`, {\n        method: 'POST',\n        body: JSON.stringify({ repaymentAmount }),\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n};\n\nexport const loadLoans = async () => (\n    await fetch('api/v1/loans', {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${token}`\n        }\n    })\n        .then(response => response.json())\n);\n\nexport const loadLoan = async () =>\n  await fetch(`api/v1/loans/${userId}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((response) => response.json());\n\nexport const loadRepaymentHistory = async ({ loanId }) =>\n  await fetch(`api/v1/loans/${loanId}/repaymentHistory`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((response) => response.json());\n\nexport const approveOrRejectLoan = ({ loanId, status }) => (\n    fetch(`api/v1/loans/${loanId}`, {\n        method: 'POST',\n        body: JSON.stringify({ status }),\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n);"]},"metadata":{},"sourceType":"module"}