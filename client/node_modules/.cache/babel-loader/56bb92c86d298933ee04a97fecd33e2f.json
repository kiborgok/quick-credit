{"ast":null,"code":"export const applyLoan = ({\n  amount,\n  tenor,\n  userId,\n  token\n}) => fetch(`api/v1/loans/${userId}/apply`, {\n  method: 'POST',\n  body: JSON.stringify({\n    amount,\n    tenor\n  }),\n  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n}).then(response => response.json());\nexport const repayLoan = ({\n  repaymentAmount,\n  loanId,\n  token\n}) => {\n  return fetch(`api/v1/loans/${loanId}/repayment`, {\n    method: 'POST',\n    body: JSON.stringify({\n      repaymentAmount\n    }),\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.json());\n};\nexport const loadLoans = async ({}) => await fetch('api/v1/loans', {\n  method: 'GET',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n}).then(response => response.json());\nexport const loadLoan = async () => await fetch(`api/v1/loans/${auth.userId}`, {\n  method: \"GET\",\n  headers: {\n    Authorization: `Bearer ${auth.token}`\n  }\n}).then(response => response.json());\nexport const loadRepaymentHistory = async ({\n  loanId\n}) => await fetch(`api/v1/loans/${loanId}/repaymentHistory`, {\n  method: \"GET\",\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}).then(response => response.json());\nexport const approveOrRejectLoan = ({\n  loanId,\n  status\n}) => fetch(`api/v1/loans/${loanId}`, {\n  method: 'POST',\n  body: JSON.stringify({\n    status\n  }),\n  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n}).then(response => response.json());","map":{"version":3,"sources":["/home/vanellope/Programming/Javascript/Quickloan/frontend/src/api/loanApi.js"],"names":["applyLoan","amount","tenor","userId","token","fetch","method","body","JSON","stringify","headers","then","response","json","repayLoan","repaymentAmount","loanId","loadLoans","loadLoan","auth","Authorization","loadRepaymentHistory","approveOrRejectLoan","status"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA,MAAjB;AAAyBC,EAAAA;AAAzB,CAAD,KACrBC,KAAK,CAAE,gBAAeF,MAAO,QAAxB,EAAiC;AAClCG,EAAAA,MAAM,EAAE,MAD0B;AAElCC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAf,CAF4B;AAGlCQ,EAAAA,OAAO,EAAE;AACL,qBAAkB,UAASN,KAAM,EAD5B;AAEL,oBAAgB;AAFX;AAHyB,CAAjC,CAAL,CAQKO,IARL,CAQUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARtB,CADG;AAYP,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,MAAnB;AAA2BZ,EAAAA;AAA3B,CAAD,KAAwC;AAC7D,SAAOC,KAAK,CAAE,gBAAeW,MAAO,YAAxB,EAAqC;AAC7CV,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEM,MAAAA;AAAF,KAAf,CAFuC;AAG7CL,IAAAA,OAAO,EAAE;AACL,uBAAkB,UAASN,KAAM,EAD5B;AAEL,sBAAgB;AAFX;AAHoC,GAArC,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,CAAP;AASH,CAVM;AAYP,OAAO,MAAMI,SAAS,GAAG,OAAO,EAAP,KACrB,MAAMZ,KAAK,CAAC,cAAD,EAAiB;AACxBC,EAAAA,MAAM,EAAE,KADgB;AAExBI,EAAAA,OAAO,EAAE;AACL,qBAAkB,UAASN,KAAM;AAD5B;AAFe,CAAjB,CAAL,CAMDO,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CADH;AAUP,OAAO,MAAMK,QAAQ,GAAG,YACtB,MAAMb,KAAK,CAAE,gBAAec,IAAI,CAAChB,MAAO,EAA7B,EAAgC;AACzCG,EAAAA,MAAM,EAAE,KADiC;AAEzCI,EAAAA,OAAO,EAAE;AACPU,IAAAA,aAAa,EAAG,UAASD,IAAI,CAACf,KAAM;AAD7B;AAFgC,CAAhC,CAAL,CAKHO,IALG,CAKGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALhB,CADD;AAQP,OAAO,MAAMQ,oBAAoB,GAAG,OAAO;AAAEL,EAAAA;AAAF,CAAP,KAClC,MAAMX,KAAK,CAAE,gBAAeW,MAAO,mBAAxB,EAA4C;AACrDV,EAAAA,MAAM,EAAE,KAD6C;AAErDI,EAAAA,OAAO,EAAE;AACPU,IAAAA,aAAa,EAAG,UAAShB,KAAM;AADxB;AAF4C,CAA5C,CAAL,CAKHO,IALG,CAKGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALhB,CADD;AAQP,OAAO,MAAMS,mBAAmB,GAAG,CAAC;AAAEN,EAAAA,MAAF;AAAUO,EAAAA;AAAV,CAAD,KAC/BlB,KAAK,CAAE,gBAAeW,MAAO,EAAxB,EAA2B;AAC5BV,EAAAA,MAAM,EAAE,MADoB;AAE5BC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEc,IAAAA;AAAF,GAAf,CAFsB;AAG5Bb,EAAAA,OAAO,EAAE;AACL,qBAAkB,UAASN,KAAM,EAD5B;AAEL,oBAAgB;AAFX;AAHmB,CAA3B,CAAL,CAQKO,IARL,CAQUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARtB,CADG","sourcesContent":["export const applyLoan = ({ amount, tenor, userId, token}) => (\n    fetch(`api/v1/loans/${userId}/apply`, {\n        method: 'POST',\n        body: JSON.stringify({ amount, tenor }),\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n);\n\nexport const repayLoan = ({ repaymentAmount, loanId, token }) => {\n    return fetch(`api/v1/loans/${loanId}/repayment`, {\n        method: 'POST',\n        body: JSON.stringify({ repaymentAmount }),\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n};\n\nexport const loadLoans = async ({}) => (\n    await fetch('api/v1/loans', {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${token}`\n        }\n    })\n        .then(response => response.json())\n);\n\nexport const loadLoan = async () =>\n  await fetch(`api/v1/loans/${auth.userId}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${auth.token}`,\n    },\n  }).then((response) => response.json());\n\nexport const loadRepaymentHistory = async ({ loanId }) =>\n  await fetch(`api/v1/loans/${loanId}/repaymentHistory`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((response) => response.json());\n\nexport const approveOrRejectLoan = ({ loanId, status }) => (\n    fetch(`api/v1/loans/${loanId}`, {\n        method: 'POST',\n        body: JSON.stringify({ status }),\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n);"]},"metadata":{},"sourceType":"module"}